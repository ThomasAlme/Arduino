#include <SoftwareSerial.h>
#include <WiFiEsp.h>

// sendMessage() for å sende melding til Arduino

IPAddress ipadresse(192,168,1,239);
SoftwareSerial wifi_modul(6, 7);
void (*resetFunc)(void) = 0;

const char ssid[] = "SkoleNett";
const char passord[] = "SkoleNett123";

const int PIR_SENSOR = 11;

bool previous_state = false;
bool state = false;

int unstuck = 0;
int unstuck2 = 0;

void onChange() { // Kjøres når PIR sensor endrer seg
  Serial.print("Sensor er: ");
  
  if (state == HIGH) {
    Serial.println("PÅ");
    sendMessage(ipadresse, "lys_på");
    
  } else {
    Serial.println("AV");
    sendMessage(ipadresse, "lys_av");
  }  
}

// Selve programmet //

void loop() {
  state = digitalRead(PIR_SENSOR);
  if (previous_state != state) {
    previous_state = state;
    onChange();
  }
  
  delay(50);
}

int wifi_status = WL_IDLE_STATUS;
WiFiEspClient client;

void setup() {
  Serial.begin(115200);
  Serial.println("\nStarter WiFiRemote klient...");

  wifi_modul.begin(9600);

  // Legg til pins her
  pinMode(PIR_SENSOR, INPUT);
  
  // WiFi starter opp
  
  WiFi.init(&wifi_modul);

  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi modul ikke tilkoblet");
    while(true); // Stopp programmet.
  }

  while (wifi_status != WL_CONNECTED) {
    Serial.print("Prøver å koble til trådløst nettverk: ");
    Serial.println(ssid);

    wifi_status = WiFi.begin(ssid, passord);
  }

  Serial.println("Koblet til nettverket!");
  printWiFiStatus();

  Serial.print("Kalibrerer PIR sensor...");
  
  // Venter i 30 sekunder
  for(int i = 0; i < 30; i++) {
    delay(1000);
  }

  Serial.println("Kalibrering ferdig!");
  delay(50);

  Serial.println("WiFiRemote klient er operativ!");
}

bool sendMessage(IPAddress ip, String melding) {
  bool received = false;
  unstuck2 = 0;
  while (!received) {
    unstuck2++;
    if (client.connect(ip, 8090)) {
      unstuck2--;
      Serial.print("Koblet til IP: ");
      Serial.println(ip);

      client.print(melding);
      client.print('\r');  
    }

    if (getMessage() == melding) {
      client.print("§\r");
      received = true;
    }

    if (unstuck2 > 30) {
      Serial.println("Arduino WiFi har krasjet, tar ein restart...");
      resetFunc(); // Wireless has crashed, time to reboot (Dirty fix)
      return false;
    }
  }

  delay(50);
  client.stop();
  delay(200);
  Serial.println();

  return true;
}

String getMessage() {
  String mottatt = "";
  unstuck = 0;

    while (client.connected()) {
      unstuck++;
      if (unstuck > 30) {
        break;
      }
      if (client.available()) {
        unstuck--;
        char c = client.read();
        if (c == '\r') {
          Serial.print("\nFikk melding: ");
          Serial.println(mottatt);
          break;
        } else {
          mottatt += c;
        }
      }
    }

    return mottatt;
}

void printWiFiStatus() {
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  IPAddress ip = WiFi.localIP();
  Serial.print("IP Adresse: ");
  Serial.println(ip);

  long rssi = WiFi.RSSI();
  Serial.print("Signal styrke (RSSI): ");
  Serial.print(rssi);
  Serial.println("dBm");
}
